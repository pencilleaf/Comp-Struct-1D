/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input rbutton,
    input bbutton,
    input gbutton,
    input ybutton,
    input undobutton,
    input submitbutton,
    output reg [3:0] bigled1,
    output reg [3:0] bigled2,
    output reg [3:0] bigled3,
    output reg [3:0] bigled4,
    output reg [3:0] bigled5,
    output reg [3:0] bigled6,
    output reg [3:0] smallled1,
    output reg [3:0] smallled2,
    output reg [3:0] smallled3,
    output reg [3:0] smallled4,
    output reg [3:0] smallled5,
    output reg [3:0] smallled6,
    output reg [6:0] io_seg,
    output reg [3:0] io_sel
  );
  
  
  
  reg rst;
  
  reg rbuttonstate;
  
  reg bbuttonstate;
  
  reg gbuttonstate;
  
  reg ybuttonstate;
  
  reg undobuttonstate;
  
  reg submitbuttonstate;
  
  wire [18-1:0] M_userinput_out;
  reg [18-1:0] M_userinput_in;
  reg [3-1:0] M_userinput_layer;
  reg [1-1:0] M_userinput_rbutton;
  reg [1-1:0] M_userinput_bbutton;
  reg [1-1:0] M_userinput_gbutton;
  reg [1-1:0] M_userinput_ybutton;
  reg [1-1:0] M_userinput_undobutton;
  reg [1-1:0] M_userinput_submitbutton;
  userinput_dp_1 userinput (
    .in(M_userinput_in),
    .layer(M_userinput_layer),
    .rbutton(M_userinput_rbutton),
    .bbutton(M_userinput_bbutton),
    .gbutton(M_userinput_gbutton),
    .ybutton(M_userinput_ybutton),
    .undobutton(M_userinput_undobutton),
    .submitbutton(M_userinput_submitbutton),
    .out(M_userinput_out)
  );
  
  wire [4-1:0] M_tosmallled_led1;
  wire [4-1:0] M_tosmallled_led2;
  wire [4-1:0] M_tosmallled_led3;
  wire [4-1:0] M_tosmallled_led4;
  wire [4-1:0] M_tosmallled_led5;
  wire [4-1:0] M_tosmallled_led6;
  reg [18-1:0] M_tosmallled_in;
  toled_2 tosmallled (
    .in(M_tosmallled_in),
    .led1(M_tosmallled_led1),
    .led2(M_tosmallled_led2),
    .led3(M_tosmallled_led3),
    .led4(M_tosmallled_led4),
    .led5(M_tosmallled_led5),
    .led6(M_tosmallled_led6)
  );
  
  wire [4-1:0] M_tobigled_led1;
  wire [4-1:0] M_tobigled_led2;
  wire [4-1:0] M_tobigled_led3;
  wire [4-1:0] M_tobigled_led4;
  wire [4-1:0] M_tobigled_led5;
  wire [4-1:0] M_tobigled_led6;
  reg [18-1:0] M_tobigled_in;
  toled_2 tobigled (
    .in(M_tobigled_in),
    .led1(M_tobigled_led1),
    .led2(M_tobigled_led2),
    .led3(M_tobigled_led3),
    .led4(M_tobigled_led4),
    .led5(M_tobigled_led5),
    .led6(M_tobigled_led6)
  );
  
  wire [8-1:0] M_bin_to_dec_digits;
  reg [7-1:0] M_bin_to_dec_value;
  bin_to_dec_4 bin_to_dec (
    .value(M_bin_to_dec_value),
    .digits(M_bin_to_dec_digits)
  );
  
  wire [18-1:0] M_alu_out;
  reg [18-1:0] M_alu_a;
  reg [18-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_5 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_6 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_press_r_count;
  reg [1-1:0] M_press_r_button;
  button_press_7 press_r (
    .clk(clk),
    .rst(rst),
    .button(M_press_r_button),
    .count(M_press_r_count)
  );
  wire [1-1:0] M_press_g_count;
  reg [1-1:0] M_press_g_button;
  button_press_7 press_g (
    .clk(clk),
    .rst(rst),
    .button(M_press_g_button),
    .count(M_press_g_count)
  );
  wire [1-1:0] M_press_b_count;
  reg [1-1:0] M_press_b_button;
  button_press_7 press_b (
    .clk(clk),
    .rst(rst),
    .button(M_press_b_button),
    .count(M_press_b_count)
  );
  wire [1-1:0] M_press_y_count;
  reg [1-1:0] M_press_y_button;
  button_press_7 press_y (
    .clk(clk),
    .rst(rst),
    .button(M_press_y_button),
    .count(M_press_y_count)
  );
  wire [1-1:0] M_press_submit_count;
  reg [1-1:0] M_press_submit_button;
  button_press_7 press_submit (
    .clk(clk),
    .rst(rst),
    .button(M_press_submit_button),
    .count(M_press_submit_count)
  );
  wire [1-1:0] M_press_undo_count;
  reg [1-1:0] M_press_undo_button;
  button_press_7 press_undo (
    .clk(clk),
    .rst(rst),
    .button(M_press_undo_button),
    .count(M_press_undo_count)
  );
  wire [18-1:0] M_randomnum_out;
  reg [18-1:0] M_randomnum_in;
  reg [1-1:0] M_randomnum_submitbutton;
  randomnum_13 randomnum (
    .clk(clk),
    .rst(rst),
    .in(M_randomnum_in),
    .submitbutton(M_randomnum_submitbutton),
    .out(M_randomnum_out)
  );
  localparam PREP_state = 4'd0;
  localparam IDLE_state = 4'd1;
  localparam ONE_state = 4'd2;
  localparam TWO_state = 4'd3;
  localparam THREE_state = 4'd4;
  localparam FOUR_state = 4'd5;
  localparam FIVE_state = 4'd6;
  localparam SIX_state = 4'd7;
  localparam END_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = PREP_state;
  reg [17:0] M_ledmatrix_d, M_ledmatrix_q = 1'h0;
  reg [17:0] M_ledmatrix2_d, M_ledmatrix2_q = 1'h0;
  reg [6:0] M_score_d, M_score_q = 1'h0;
  reg [2:0] M_layer_d, M_layer_q = 1'h0;
  wire [8-1:0] M_timer_digits;
  reg [1-1:0] M_timer_reset;
  timer_14 timer (
    .clk(clk),
    .rst(rst),
    .reset(M_timer_reset),
    .digits(M_timer_digits)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_15 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_ledmatrix_d = M_ledmatrix_q;
    M_ledmatrix2_d = M_ledmatrix2_q;
    M_layer_d = M_layer_q;
    M_score_d = M_score_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_alu_a = 16'h0000;
    M_alu_alufn = 6'h00;
    M_alu_b = 16'h0000;
    M_score_d = 7'h00;
    M_bin_to_dec_value = M_score_q;
    M_seg_values = {M_timer_digits[4+3-:4], M_timer_digits[0+3-:4], M_bin_to_dec_digits[4+3-:4], M_bin_to_dec_digits[0+3-:4]};
    M_timer_reset = 1'h0;
    io_seg = M_seg_seg;
    io_sel = M_seg_sel;
    M_press_r_button = ~rbutton;
    M_press_g_button = ~gbutton;
    M_press_b_button = ~bbutton;
    M_press_y_button = ~ybutton;
    M_press_submit_button = ~submitbutton;
    M_press_undo_button = ~undobutton;
    rbuttonstate = M_press_r_count;
    bbuttonstate = M_press_b_count;
    gbuttonstate = M_press_g_count;
    ybuttonstate = M_press_y_count;
    submitbuttonstate = M_press_submit_count;
    undobuttonstate = M_press_undo_count;
    M_userinput_rbutton = M_press_r_count;
    M_userinput_gbutton = M_press_g_count;
    M_userinput_bbutton = M_press_b_count;
    M_userinput_ybutton = M_press_y_count;
    M_userinput_undobutton = M_press_undo_count;
    M_userinput_submitbutton = M_press_submit_count;
    M_layer_d = 3'h0;
    M_userinput_layer = M_layer_q;
    M_userinput_in = 18'h00000;
    M_ledmatrix_d = M_userinput_out;
    M_userinput_in = M_ledmatrix_q;
    M_tobigled_in = M_userinput_out;
    M_randomnum_submitbutton = M_press_submit_count;
    M_ledmatrix2_d = M_randomnum_out;
    M_randomnum_in = M_ledmatrix2_q;
    M_tosmallled_in = M_ledmatrix2_q;
    smallled1 = M_tosmallled_led1;
    smallled2 = M_tosmallled_led2;
    smallled3 = M_tosmallled_led3;
    smallled4 = M_tosmallled_led4;
    smallled5 = M_tosmallled_led5;
    smallled6 = M_tosmallled_led6;
    bigled1 = M_tobigled_led1;
    bigled2 = M_tobigled_led2;
    bigled3 = M_tobigled_led3;
    bigled4 = M_tobigled_led4;
    bigled5 = M_tobigled_led5;
    bigled6 = M_tobigled_led6;
    
    case (M_state_q)
      PREP_state: begin
        M_layer_d = 3'h7;
        if (M_press_submit_count) begin
          M_timer_reset = 1'h1;
          M_score_d = 7'h00;
          M_state_d = IDLE_state;
        end
      end
      IDLE_state: begin
        M_layer_d = 3'h0;
        M_score_d = M_score_q;
        if (M_press_r_count | M_press_g_count | M_press_b_count | M_press_y_count) begin
          M_state_d = ONE_state;
        end
        if (M_timer_digits == 8'ha0) begin
          M_state_d = END_state;
        end
      end
      ONE_state: begin
        M_layer_d = 3'h1;
        M_score_d = M_score_q;
        M_seg_values = {M_timer_digits[4+3-:4], M_timer_digits[0+3-:4], M_bin_to_dec_digits[4+3-:4], M_bin_to_dec_digits[0+3-:4]};
        if (M_press_r_count | M_press_g_count | M_press_b_count | M_press_y_count) begin
          M_state_d = TWO_state;
        end
        if (M_press_undo_count) begin
          M_state_d = IDLE_state;
        end
        if (M_press_submit_count) begin
          M_alu_alufn = 6'h33;
          M_alu_a = {M_ledmatrix_q[15+2-:3], M_ledmatrix_q[12+2-:3], M_ledmatrix_q[9+2-:3], M_ledmatrix_q[6+2-:3], M_ledmatrix_q[3+2-:3], M_ledmatrix_q[0+2-:3]};
          M_alu_b = {M_ledmatrix2_q[15+2-:3], M_ledmatrix2_q[12+2-:3], M_ledmatrix2_q[9+2-:3], M_ledmatrix2_q[6+2-:3], M_ledmatrix2_q[3+2-:3], M_ledmatrix2_q[0+2-:3]};
          if (M_alu_out == 18'h00001) begin
            M_score_d = M_score_q + M_layer_q;
            M_bin_to_dec_value = M_score_q;
            M_seg_values[4+3-:4] = M_bin_to_dec_digits[4+3-:4];
            M_seg_values[0+3-:4] = M_bin_to_dec_digits[0+3-:4];
          end
          M_state_d = IDLE_state;
        end
        if (M_timer_digits == 8'ha0) begin
          M_state_d = END_state;
        end
      end
      TWO_state: begin
        M_layer_d = 3'h2;
        M_score_d = M_score_q;
        M_seg_values = {M_timer_digits[4+3-:4], M_timer_digits[0+3-:4], M_bin_to_dec_digits[4+3-:4], M_bin_to_dec_digits[0+3-:4]};
        if (M_press_r_count | M_press_g_count | M_press_b_count | M_press_y_count) begin
          M_state_d = THREE_state;
        end
        if (M_press_undo_count) begin
          M_state_d = ONE_state;
        end
        if (M_press_submit_count) begin
          M_alu_alufn = 6'h33;
          M_alu_a = {M_ledmatrix_q[15+2-:3], M_ledmatrix_q[12+2-:3], M_ledmatrix_q[9+2-:3], M_ledmatrix_q[6+2-:3], M_ledmatrix_q[3+2-:3], M_ledmatrix_q[0+2-:3]};
          M_alu_b = {M_ledmatrix2_q[15+2-:3], M_ledmatrix2_q[12+2-:3], M_ledmatrix2_q[9+2-:3], M_ledmatrix2_q[6+2-:3], M_ledmatrix2_q[3+2-:3], M_ledmatrix2_q[0+2-:3]};
          if (M_alu_out == 18'h00001) begin
            M_score_d = M_score_q + M_layer_q;
            M_bin_to_dec_value = M_score_q;
            M_seg_values[4+3-:4] = M_bin_to_dec_digits[4+3-:4];
            M_seg_values[0+3-:4] = M_bin_to_dec_digits[0+3-:4];
          end
          M_state_d = IDLE_state;
        end
        if (M_timer_digits == 8'ha0) begin
          M_state_d = END_state;
        end
      end
      THREE_state: begin
        M_layer_d = 3'h3;
        M_score_d = M_score_q;
        M_seg_values = {M_timer_digits[4+3-:4], M_timer_digits[0+3-:4], M_bin_to_dec_digits[4+3-:4], M_bin_to_dec_digits[0+3-:4]};
        if (M_press_r_count | M_press_g_count | M_press_b_count | M_press_y_count) begin
          M_state_d = FOUR_state;
        end
        if (M_press_undo_count) begin
          M_state_d = TWO_state;
        end
        if (M_press_submit_count) begin
          M_alu_alufn = 6'h33;
          M_alu_a = {M_ledmatrix_q[15+2-:3], M_ledmatrix_q[12+2-:3], M_ledmatrix_q[9+2-:3], M_ledmatrix_q[6+2-:3], M_ledmatrix_q[3+2-:3], M_ledmatrix_q[0+2-:3]};
          M_alu_b = {M_ledmatrix2_q[15+2-:3], M_ledmatrix2_q[12+2-:3], M_ledmatrix2_q[9+2-:3], M_ledmatrix2_q[6+2-:3], M_ledmatrix2_q[3+2-:3], M_ledmatrix2_q[0+2-:3]};
          if (M_alu_out == 18'h00001) begin
            M_score_d = M_score_q + M_layer_q;
            M_bin_to_dec_value = M_score_q;
            M_seg_values[4+3-:4] = M_bin_to_dec_digits[4+3-:4];
            M_seg_values[0+3-:4] = M_bin_to_dec_digits[0+3-:4];
          end
          M_state_d = IDLE_state;
        end
        if (M_timer_digits == 8'ha0) begin
          M_state_d = END_state;
        end
      end
      FOUR_state: begin
        M_layer_d = 3'h4;
        M_score_d = M_score_q;
        M_seg_values = {M_timer_digits[4+3-:4], M_timer_digits[0+3-:4], M_bin_to_dec_digits[4+3-:4], M_bin_to_dec_digits[0+3-:4]};
        if (M_press_r_count | M_press_g_count | M_press_b_count | M_press_y_count) begin
          M_state_d = FIVE_state;
        end
        if (M_press_undo_count) begin
          M_state_d = THREE_state;
        end
        if (M_press_submit_count) begin
          M_alu_alufn = 6'h33;
          M_alu_a = {M_ledmatrix_q[15+2-:3], M_ledmatrix_q[12+2-:3], M_ledmatrix_q[9+2-:3], M_ledmatrix_q[6+2-:3], M_ledmatrix_q[3+2-:3], M_ledmatrix_q[0+2-:3]};
          M_alu_b = {M_ledmatrix2_q[15+2-:3], M_ledmatrix2_q[12+2-:3], M_ledmatrix2_q[9+2-:3], M_ledmatrix2_q[6+2-:3], M_ledmatrix2_q[3+2-:3], M_ledmatrix2_q[0+2-:3]};
          if (M_alu_out == 18'h00001) begin
            M_score_d = M_score_q + M_layer_q;
            M_bin_to_dec_value = M_score_q;
            M_seg_values[4+3-:4] = M_bin_to_dec_digits[4+3-:4];
            M_seg_values[0+3-:4] = M_bin_to_dec_digits[0+3-:4];
          end
          M_state_d = IDLE_state;
        end
        if (M_timer_digits == 8'ha0) begin
          M_state_d = END_state;
        end
      end
      FIVE_state: begin
        M_layer_d = 3'h5;
        M_score_d = M_score_q;
        M_seg_values = {M_timer_digits[4+3-:4], M_timer_digits[0+3-:4], M_bin_to_dec_digits[4+3-:4], M_bin_to_dec_digits[0+3-:4]};
        if (M_press_r_count | M_press_g_count | M_press_b_count | M_press_y_count) begin
          M_state_d = SIX_state;
        end
        if (M_press_undo_count) begin
          M_state_d = FOUR_state;
        end
        if (M_press_submit_count) begin
          M_alu_alufn = 6'h33;
          M_alu_a = {M_ledmatrix_q[15+2-:3], M_ledmatrix_q[12+2-:3], M_ledmatrix_q[9+2-:3], M_ledmatrix_q[6+2-:3], M_ledmatrix_q[3+2-:3], M_ledmatrix_q[0+2-:3]};
          M_alu_b = {M_ledmatrix2_q[15+2-:3], M_ledmatrix2_q[12+2-:3], M_ledmatrix2_q[9+2-:3], M_ledmatrix2_q[6+2-:3], M_ledmatrix2_q[3+2-:3], M_ledmatrix2_q[0+2-:3]};
          if (M_alu_out == 18'h00001) begin
            M_score_d = M_score_q + M_layer_q;
            M_bin_to_dec_value = M_score_q;
            M_seg_values[4+3-:4] = M_bin_to_dec_digits[4+3-:4];
            M_seg_values[0+3-:4] = M_bin_to_dec_digits[0+3-:4];
          end
          M_state_d = IDLE_state;
        end
        if (M_timer_digits == 8'ha0) begin
          M_state_d = END_state;
        end
      end
      SIX_state: begin
        M_layer_d = 3'h6;
        M_score_d = M_score_q;
        M_seg_values = {M_timer_digits[4+3-:4], M_timer_digits[0+3-:4], M_bin_to_dec_digits[4+3-:4], M_bin_to_dec_digits[0+3-:4]};
        if (M_press_undo_count) begin
          M_state_d = FIVE_state;
        end
        if (M_press_submit_count) begin
          M_alu_alufn = 6'h33;
          M_alu_a = {M_ledmatrix_q[15+2-:3], M_ledmatrix_q[12+2-:3], M_ledmatrix_q[9+2-:3], M_ledmatrix_q[6+2-:3], M_ledmatrix_q[3+2-:3], M_ledmatrix_q[0+2-:3]};
          M_alu_b = {M_ledmatrix2_q[15+2-:3], M_ledmatrix2_q[12+2-:3], M_ledmatrix2_q[9+2-:3], M_ledmatrix2_q[6+2-:3], M_ledmatrix2_q[3+2-:3], M_ledmatrix2_q[0+2-:3]};
          if (M_alu_out == 18'h00001) begin
            M_score_d = M_score_q + M_layer_q;
            M_bin_to_dec_value = M_score_q;
            M_seg_values[4+3-:4] = M_bin_to_dec_digits[4+3-:4];
            M_seg_values[0+3-:4] = M_bin_to_dec_digits[0+3-:4];
          end
          M_state_d = IDLE_state;
        end
        if (M_timer_digits == 8'ha0) begin
          M_state_d = END_state;
        end
      end
      END_state: begin
        M_timer_reset = 1'h1;
        M_layer_d = 3'h7;
        M_score_d = M_score_q;
        M_ledmatrix_d = 18'h00000;
        M_ledmatrix2_d = 18'h00000;
        if (M_press_undo_count) begin
          M_timer_reset = 1'h0;
          M_state_d = PREP_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_ledmatrix_q <= 1'h0;
      M_ledmatrix2_q <= 1'h0;
      M_score_q <= 1'h0;
      M_layer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_ledmatrix_q <= M_ledmatrix_d;
      M_ledmatrix2_q <= M_ledmatrix2_d;
      M_score_q <= M_score_d;
      M_layer_q <= M_layer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
