/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module timer_14 (
    input clk,
    input rst,
    input reset,
    output reg [7:0] digits
  );
  
  
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_31 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_ctr_value;
  counter_32 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  localparam IDLE_state = 2'd0;
  localparam COUNT_state = 2'd1;
  localparam STOP_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  reg [15:0] M_value_d, M_value_q = 1'h0;
  
  wire [8-1:0] M_bin_to_dec_digits;
  reg [7-1:0] M_bin_to_dec_value;
  bin_to_dec_4 bin_to_dec (
    .value(M_bin_to_dec_value),
    .digits(M_bin_to_dec_digits)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_value_d = M_value_q;
    
    M_value_d = 16'h0000;
    M_edge_detector_in = M_ctr_value;
    M_bin_to_dec_value = M_value_q;
    digits = M_bin_to_dec_digits;
    
    case (M_state_q)
      IDLE_state: begin
        M_value_d = 16'h001e;
        if (reset == 1'h1) begin
          M_state_d = COUNT_state;
        end
      end
      COUNT_state: begin
        M_value_d = M_value_q;
        M_edge_detector_in = M_ctr_value;
        if (M_edge_detector_out) begin
          if (M_value_q != 1'h0) begin
            M_value_d = M_value_q - 1'h1;
          end else begin
            M_state_d = STOP_state;
          end
        end
        M_bin_to_dec_value = M_value_q;
        digits = M_bin_to_dec_digits;
      end
      STOP_state: begin
        M_value_d = M_value_q;
        if (rst) begin
          M_state_d = IDLE_state;
        end
        if (reset == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_value_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_value_q <= M_value_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
